
&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	Если Элементы.СписокАктов.ВыделенныеСтроки.Количество() = 0 Или 
					Элементы.СписокУслуг.ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	МассивДанных = Новый Массив();	
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокУслуг.ВыделенныеСтроки Цикл
			СтрокиДанныхПоУслуге = ЭтаФорма.Элементы.СписокУслуг.ДанныеСтроки(ВыделеннаяСтрока);
			СтруктураВыбраннойСтроки = Новый Структура;
				СтруктураВыбраннойСтроки.Вставить("АналитикаУчета", СтрокиДанныхПоУслуге.АналитикаУчета);
				СтруктураВыбраннойСтроки.Вставить("Всего", СтрокиДанныхПоУслуге.Всего);
				СтруктураВыбраннойСтроки.Вставить("Количество", СтрокиДанныхПоУслуге.Количество);
				СтруктураВыбраннойСтроки.Вставить("Номенклатура", СтрокиДанныхПоУслуге.Номенклатура);
				СтруктураВыбраннойСтроки.Вставить("Содержание", СтрокиДанныхПоУслуге.Содержание);
				СтруктураВыбраннойСтроки.Вставить("СтавкаНДС", СтрокиДанныхПоУслуге.СтавкаНДС);
				СтруктураВыбраннойСтроки.Вставить("Субконто", СтрокиДанныхПоУслуге.Субконто);
				СтруктураВыбраннойСтроки.Вставить("Сумма", СтрокиДанныхПоУслуге.Сумма);
				СтруктураВыбраннойСтроки.Вставить("СуммаНДС", СтрокиДанныхПоУслуге.СуммаНДС);
				СтруктураВыбраннойСтроки.Вставить("СчетДоходов", СтрокиДанныхПоУслуге.СчетДоходов);
				СтруктураВыбраннойСтроки.Вставить("СчетНаОплатуПокупателю", СтрокиДанныхПоУслуге.СчетНаОплатуПокупателю);
				СтруктураВыбраннойСтроки.Вставить("СчетРасходов", СтрокиДанныхПоУслуге.СчетРасходов);
				СтруктураВыбраннойСтроки.Вставить("СчетУчетаНДСПоРеализации", СтрокиДанныхПоУслуге.СчетУчетаНДСПоРеализации);
				СтруктураВыбраннойСтроки.Вставить("Цена", СтрокиДанныхПоУслуге.Цена);
			МассивДанных.Добавить(СтруктураВыбраннойСтроки);
		КонецЦикла;

	Если МассивДанных.Количество() > 0 Тогда 
		Оповестить("ОбновитьСписокУслугКалькуляции", МассивДанных);
	КонецЕсли;

	ЭтаФорма.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура СписокАктовПриАктивизацииСтроки(Элемент)
	ЗаполнитьТЧСпискаНоменклатуры(Элемент.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСпискаНоменклатуры(ВыбранныйДокумент)

		СписокУслуг.Очистить();
	НомерСтроки = 1;
		Для Каждого СтрокаУслугДокумента Из ВыбранныйДокумент.Услуги Цикл 
			НоваяСтрокаСписка = СписокУслуг.Добавить();
			НоваяСтрокаСписка.НомерСтроки = НомерСтроки;
			НоваяСтрокаСписка.Номенклатура = СтрокаУслугДокумента.Номенклатура;
			НоваяСтрокаСписка.Содержание = СтрокаУслугДокумента.Содержание;
			НоваяСтрокаСписка.Количество = СтрокаУслугДокумента.Количество;
			НоваяСтрокаСписка.Цена = СтрокаУслугДокумента.Цена;
			НоваяСтрокаСписка.Сумма = СтрокаУслугДокумента.Сумма;
			НоваяСтрокаСписка.СтавкаНДС = СтрокаУслугДокумента.СтавкаНДС;
			НоваяСтрокаСписка.СуммаНДС = СтрокаУслугДокумента.СуммаНДС;
			НоваяСтрокаСписка.СчетДоходов = СтрокаУслугДокумента.СчетДоходов;
			НоваяСтрокаСписка.Субконто = СтрокаУслугДокумента.Субконто;
			НоваяСтрокаСписка.СчетУчетаНДСПоРеализации = СтрокаУслугДокумента.СчетУчетаНДСПоРеализации;
			НоваяСтрокаСписка.СчетРасходов = СтрокаУслугДокумента.СчетРасходов;
			НоваяСтрокаСписка.СчетНаОплатуПокупателю = СтрокаУслугДокумента.СчетНаОплатуПокупателю;
			НоваяСтрокаСписка.Всего = СтрокаУслугДокумента.Сумма + ?(СтрокаУслугДокумента.СуммаНДС = 0, 0, СтрокаУслугДокумента.СуммаНДС);

				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Субконто", СтрокаУслугДокумента.Субконто);				
				ДанныеСтроки.Вставить("СуммаНДС", СтрокаУслугДокумента.СуммаНДС);			
				ДанныеСтроки.Вставить("СчетДоходов", СтрокаУслугДокумента.СчетДоходов);
				ДанныеСтроки.Вставить("СчетРасходов", СтрокаУслугДокумента.СчетРасходов);
				ДанныеСтроки.Вставить("СчетУчетаНДСПоРеализации", СтрокаУслугДокумента.СчетУчетаНДСПоРеализации);
		
					ПараметрыОбъекта = ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ВыбранныйДокумент);

				РезультатАналитикаУчета = ОписаниеАналитикиУчета(ДанныеСтроки, ПараметрыОбъекта);

			НоваяСтрокаСписка.АналитикаУчета = ?(РезультатАналитикаУчета.АналитикаУчетаЗаполнена, РезультатАналитикаУчета.АналитикаУчета, "");
		НомерСтроки = НомерСтроки + 1;		
		КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ТекущДок)

	ПараметрыОбъекта = Новый Структура;

	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", 	ТекущДок.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("ДокументБезНДС", 	ТекущДок.ДокументБезНДС);
	ПараметрыОбъекта.Вставить("ПлательщикНДФЛ", УчетнаяПолитика.ПлательщикНДФЛ(ТекущДок.Организация, ТекущДок.Дата));
	ПараметрыОбъекта.Вставить("ТребуетсяСчетРасходовПоОказаниюУслуг", 	
		РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(ТекущДок.Дата, ТекущДок.Организация));
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом", ТекущДок.СчетУчетаРасчетовСКонтрагентом);

	Возврат 	ПараметрыОбъекта;

КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеАналитикиУчета(Знач ДанныеСтроки, Знач ПараметрыОбъекта)
	
	Результат = Новый Структура;
	Результат.Вставить("АналитикаУчета",          "");
	Результат.Вставить("АналитикаУчетаЗаполнена", Истина);

	ВидСубконтоНГ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	// Счет доходов - всегда
    Если Не ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
    	Результат.АналитикаУчета 	      = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
		Результат.АналитикаУчетаЗаполнена = Ложь;
    Иначе
		СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
		Результат.АналитикаУчета = "" + СвойстваСчета.Код;
		
		Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
			
			Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
				ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
				ПредставлениеСубконто = "";
				
				Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
				Иначе
					ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
				КонецЕсли;
				Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
				КонецЕсли;
			Иначе
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
				
				// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
				Если ПараметрыОбъекта.ПлательщикНДФЛ
					И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
						ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
						ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
					Результат.АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
	
    // Счет расходов
    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
		СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
		Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
    Иначе
    	Если ПараметрыОбъекта.ТребуетсяСчетРасходовПоОказаниюУслуг Тогда
			Результат.АналитикаУчетаЗаполнена = Ложь;
		КонецЕсли;
    КонецЕсли;

	Если Не ПараметрыОбъекта.ДокументБезНДС Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
			СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
			Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
		Иначе
			Если ДанныеСтроки.СуммаНДС <> 0 Тогда
				Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
				Результат.АналитикаУчетаЗаполнена = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗакрытьДанФорму(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыделиттВсеСтроки(Команда)

	Если СписокУслуг.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	СуммаВыбранного = 0;
	ИтогСуммаНДС = 0;
	ВсегоВыбранного = 0;
	Элементы.СписокУслуг.ВыделенныеСтроки.Очистить();

	Для каждого стр из ЭтаФорма.СписокУслуг Цикл
	    Элементы.СписокУслуг.ВыделенныеСтроки.Добавить(стр.НомерСтроки-1);
	КонецЦикла;

		Для Каждого ВыделеннаяСтрока Из Элементы.СписокУслуг.ВыделенныеСтроки Цикл
			СтрокиДанныхПоУслуге = ЭтаФорма.Элементы.СписокУслуг.ДанныеСтроки(ВыделеннаяСтрока);
				Если СтрокиДанныхПоУслуге = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
			СуммаВыбранного = СуммаВыбранного + СтрокиДанныхПоУслуге.Сумма;
			ВсегоВыбранного = ВсегоВыбранного + СтрокиДанныхПоУслуге.Всего;
			ИтогСуммаНДС = ИтогСуммаНДС + СтрокиДанныхПоУслуге.СуммаНДС;
		КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыелитьСтрокиСервер()

	Для Каждого ТекущСтр Из СписокУслуг Цикл
		Элементы.СписокУслуг.ВыделенныеСтроки.Добавить(ТекущСтр);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделениеСтрок(Команда)

	Если СписокУслуг.Количество() = 0 Тогда 
		Возврат
	КонецЕсли;

	Элементы.СписокУслуг.ВыделенныеСтроки.Очистить();
	СуммаВыбранного = 0;
	ИтогСуммаНДС = 0;
	ВсегоВыбранного = 0;

КонецПроцедуры

&НаКлиенте
Процедура СписокУслугПриАктивизацииСтроки(Элемент)

	СуммаВыбранного = 0;
	ИтогСуммаНДС = 0;
	ВсегоВыбранного = 0;

		Для Каждого ВыделеннаяСтрока Из Элементы.СписокУслуг.ВыделенныеСтроки Цикл
			СтрокиДанныхПоУслуге = ЭтаФорма.Элементы.СписокУслуг.ДанныеСтроки(ВыделеннаяСтрока);
			СуммаВыбранного = СуммаВыбранного + СтрокиДанныхПоУслуге.Сумма;
			ВсегоВыбранного = ВсегоВыбранного + СтрокиДанныхПоУслуге.Всего;
			ИтогСуммаНДС = ИтогСуммаНДС + СтрокиДанныхПоУслуге.СуммаНДС;
		КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
КонецПроцедуры
